// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static Array memoryBottom;

    static int heapBottom;
    static int heapBase;

    static int LENGTH;
    static int NEXT;

    static int ALLOC_LENGTH;

    /** Initializes the class. */
    function void init() {
        let heapBase = 2048;
        let heapBottom = 16384;

        let memory = 0;
        let freeList = heapBase;
        let LENGTH = 0;
        let NEXT = 1;
        let freeList[LENGTH] = heapBottom - heapBase;
        let freeList[NEXT] = null;

        let ALLOC_LENGTH = -1;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var Array foundBlock, nextBlock, result;

        let foundBlock = Memory.bestFit(size);
        let result = foundBlock + 1;

        if (~(foundBlock = null)) {
            if (foundBlock[LENGTH] > (size + 3)) {
                let nextBlock = foundBlock + size + 1;
                let nextBlock[NEXT] = foundBlock[NEXT];
                let nextBlock[LENGTH] = foundBlock[LENGTH] - size - 1;
                let result[ALLOC_LENGTH] = size + 1;
                let freeList = nextBlock;
            } else {
                let nextBlock = foundBlock[NEXT];
                let result[ALLOC_LENGTH] = foundBlock[LENGTH];
            }

            let foundBlock = nextBlock;
        }

        return result;
    }

    function Array bestFit(int size) {
        var Array currBlock, bestBlock;
        var int bestSize, currSize;

        let bestBlock = null;
        let bestSize = heapBottom - heapBase;
        let currBlock = freeList;

        if (currBlock[NEXT] = null) {
            return currBlock;
        }

        while(~(currBlock = null)) {
            let currSize = currBlock[LENGTH] - 1;
            if (~(currSize < size) & (currSize < bestSize)) {
                let bestBlock = currBlock;
                let bestSize = currSize;
            }

            let currBlock = currBlock[NEXT];
        }

        return bestBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array prevBlock, nextBlock;
        var int size;

        let size = o[ALLOC_LENGTH];
        let o = o - 1;
        let prevBlock = Memory.findPrevFreeBlock(o);

        if (prevBlock = null) {
            let o[LENGTH] = size;
            let o[NEXT] = freeList;
            let freeList = o;
        } else {
            if ((prevBlock + prevBlock[LENGTH]) = o) {
                let prevBlock[LENGTH] = prevBlock[LENGTH] + size;
                let o = prevBlock;
            } else {
                let o[LENGTH] = size;
                let o[NEXT] = prevBlock[NEXT];
                let prevBlock[NEXT] = o;
            }
        }

        if ((o + o[LENGTH]) = o[NEXT]) {
            let nextBlock = o[NEXT];
            let o[LENGTH] = o[LENGTH] + nextBlock[LENGTH];
            let o[NEXT] = nextBlock[NEXT];
        }

        return;
    }    

    function Array findPrevFreeBlock(int object) {
        var Array prevBlock;

        if (freeList > object) {
            return null;
        }

        let prevBlock = freeList;
        while (~(prevBlock[NEXT] = null) & (prevBlock[NEXT] < object)) {
            let prevBlock = prevBlock[NEXT];
        }

        return prevBlock;
    }
}
